#!/usr/bin/env perl

use 5.010;
use warnings;
use strict;

use AnyEvent::Socket;
use AnyEvent::Handle;
use Protocol::WebSocket::Handshake::Client;
use Protocol::WebSocket::Frame;
use JSON;
use Data::Dumper;

my $app_key = "XXX";
my $channel = "test_channel";
my $ssl=0;

my $json = JSON->new;

my $h;

my ($port, $prot, $tls);

if ($ssl) {
    $port=443;
    $prot="wss";
    $tls="connect";
} else {
    $port=80;
    $prot="ws";
    $tls=undef;
}

sub init {
    my $hc = Protocol::WebSocket::Handshake::Client->new(url => "$prot://ws.pusherapp.com/app/$app_key?protocol=6");
    my $f = Protocol::WebSocket::Frame->new;

    $h = AnyEvent::Handle->new(connect => ["ws.pusherapp.com", $port],
        tls => $tls,
        tls_ctx => {verify=>0},
        keepalive => 1,
        wtimeout => 50,

        on_connect => sub {
            my ($h) = @_;
            say "connected to pusher";
            $h->push_write($hc->to_string);
        },

        on_read => sub {
            my ($h) = @_;

            my $chunk = $h->{rbuf};
            $h->{rbuf} = undef;

            if (!$hc->is_done) {
                $hc->parse($chunk);
            }

            $f->append($chunk);
            if ($f->is_ping()) {
                $h->push_write(
                    $f->new(buffer => "", type => "pong")->to_bytes
                );
            }
            while (my $msg = $f->next) {
                my $d;
                eval {
                    $d = $json->decode($msg);
                } or do {
                    my $e = $@;
                    print "error: $e\n";
                    next;
                };
                given ($d->{event}) {

                    when ("pusher:connection_established") {
                        say "subscribing to events";
                        $h->push_write(
                            $f->new($json->encode({
                                event => "pusher:subscribe",
                                data => {
                                    channel => $channel,
                                },
                            }))->to_bytes
                        );
                    }

                    default {
                        print "got event: ", Dumper $d;
                    }

                }
            }
        },
        
        on_wtimeout => sub {
            my ($h) = @_;
            $h->push_write(
                $f->new(buffer => "", type => "ping")->to_bytes
            );
        },
        
        on_error => sub {
            my ($h, $fatal, $msg) = @_;
            print "fatal($fatal): $msg\n";
            $h->destroy;
            init();
        },
        
        on_eof => sub {
            my ($h) = @_;

            say "lost connection, reconnecting";
            init();
        }
    );
}

my $c = AnyEvent->condvar;
init();
$c->wait;
